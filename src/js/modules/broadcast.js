import { checkTie, checkWin } from './checkWin';
import { resetBoard } from './resetBoard';

export const broadcast = (ws) => {
  let matrix = Array(9).fill(null);

  ws.onopen = () => {
    ws.onmessage = (e) => {
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
      const message = JSON.parse(e.data);

      // –°–º–æ—Ç—Ä–∏–º —á—Ç–æ –∑–∞ –æ—Ç–≤–µ—Ç
      switch (message.type) {
        case 'connectToPlay':
          // –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
          $('#my-name').text(message.payload.name);
          $('#enemy-name').text(message.payload.enemyName || '–°–æ–ø–µ—Ä–Ω–∏–∫–∞ –Ω–µ—Ç');
          // –ò–∑–º–µ–Ω—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
          if (message.payload.turn !== message.payload.name) {
            $('#prompt').text('–æ–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞');
          }
          // –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å–æ–∑–¥–∞—Ç–µ–ª—é –∫–æ–º–Ω–∞—Ç—ã
          if (
            message.payload.enemyName &&
            message.payload.turn == message.payload.name
          ) {
            $('#game-board').addClass('first-turn');
            $('#game-board td button').prop('disabled', false); // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ
          }
          break;

        case 'roomMessage':
          // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—à–µ–¥—à–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
          $('#chat-list ul').append(`
            <li class="message ${
              message.payload.name === $('#my-name').text() && `message__me`
            }">
              <div class="chat-user message__user">
                <svg width="20" height="20" class="chat-user__icon">
                  <use xlink:href="./images/icons/icons.svg#chat-user"></use>
                </svg>
                <p class="chat-user__name">${message.payload.name}</p>
              </div>
              <p class="message__text">
                ${message.payload.text}
              </p>
            </li>
          `);
          break;

        case 'afterShoot':
          // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º
          document
            .querySelectorAll('#game-board td button')
            .forEach((btn, index) => {
              // –ü–æ–º–µ—á–∞–µ–º –≤—ã—Å—Ç—Ä–µ–ª–µ–Ω–Ω—É—é —è—á–µ–π–∫—É
              if (index === message.payload.cellIndex - 1) {
                if (message.payload.moveItem === 'x') {
                  btn.setAttribute('data-move-by', 'x');
                } else {
                  btn.setAttribute('data-move-by', 'o');
                }
                btn.classList.add('touched');
                btn.setAttribute('disabled', true);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –Ω–∞—à—É –º–∞—Ç—Ä–∏—Ü—É
                matrix[index] = message.payload.moveItem;
              }
              // –û—Ç–∫–ª—é—á–∞–µ–º/–≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              if (message.payload.turn === $('#my-name').text()) {
                btn.removeAttribute('disabled');
              } else {
                btn.setAttribute('disabled', true);
              }
            });

          // –ò–∑–º–µ–Ω—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
          if (message.payload.turn !== $('#my-name').text()) {
            $('#prompt').text('–æ–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞');
          } else {
            $('#prompt').text('–≤–∞—à —Ö–æ–¥');
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
          if (message.payload.name === $('#my-name').text()) {
            if (checkWin(matrix)) {
              ws.send(
                JSON.stringify({
                  event: 'room-end-round',
                  payload: {
                    winner: message.payload.name,
                    roomId: $('#room-number').text(),
                  },
                })
              );
            } else if (checkTie(matrix)) {
              ws.send(
                JSON.stringify({
                  event: 'room-round-tie',
                  payload: {
                    roomId: $('#room-number').text(),
                  },
                })
              );
            }
          }

          break;

        case 'nextRound':
          // –û–±–Ω—É–ª—è–µ–º –¥–æ—Å–∫—É
          resetBoard(matrix);

          // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—á–µ—Ç—á–∏–∫ –ø–æ–±–µ–¥
          if (message.payload.winner === $('#my-name').text()) {
            $('#me .player__matches-icon div:not(.filled)')
              .first()
              .addClass('filled');
          } else {
            $('#enemy .player__matches-icon div:not(.filled)')
              .first()
              .addClass('filled');
          }

          // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –∏–≥—Ä—É
          if (
            ($('#me .player__matches-icon div.filled').length === 3 ||
              $('#enemy .player__matches-icon div.filled').length === 3) &&
            message.payload.winner === $('#my-name').text()
          ) {
            ws.send(
              JSON.stringify({
                event: 'room-endgame',
                payload: {
                  winner: message.payload.winner,
                  roomId: $('#room-number').text(),
                },
              })
            );
          }
          break;
        case 'roundTie':
          // –û–±–Ω—É–ª—è–µ–º –¥–æ—Å–∫—É
          resetBoard(matrix);
          alert('–ú–∞—Ö–∞–π—Ç–µ—Å—å –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ');
          break;

        // –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
        case 'endGame':
          alert(`${message.payload.winner}, won!!!üèÜüèÜüèÜ`);
          window.location.reload();
          break;

        // –í—ã—Ö–æ–¥–∏–º –∏–∑ –∏–≥—Ä—ã –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        default:
          window.location.reload();
          break;
      }
    };
  };
};
